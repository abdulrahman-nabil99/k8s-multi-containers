name: Deploy to Amazon EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: false
      
      - name: Verify AWS Credentials
        run: |
          echo "=== Checking AWS Configuration ==="
          echo "AWS_REGION: $AWS_REGION"
          echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
          aws sts get-caller-identity
          aws eks describe-cluster --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --query 'cluster.status'
      
      - name: Update kubeconfig
        run: |
          # Remove any existing kubeconfig
          rm -f ~/.kube/config
          
          # Update kubeconfig with explicit region
          aws eks update-kubeconfig \
            --name ${{ secrets.EKS_CLUSTER_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --verbose
          
          # Display the kubeconfig for debugging
          echo "=== Kubeconfig contents ==="
          kubectl config view --minify
          
          # Check if aws-iam-authenticator is available
          echo "=== Checking authenticator ==="
          which aws-iam-authenticator || echo "aws-iam-authenticator not found in PATH"
          aws --version
      
      - name: Install aws-iam-authenticator
        run: |
          # Download and install aws-iam-authenticator as a backup
          curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.6.14/aws-iam-authenticator_0.6.14_linux_amd64
          chmod +x ./aws-iam-authenticator
          sudo mv ./aws-iam-authenticator /usr/local/bin/
          aws-iam-authenticator version
          
          # Also ensure AWS CLI v2 is being used
          aws --version
      
      - name: Test direct EKS token generation
        run: |
          echo "=== Testing token generation ==="
          TOKEN=$(aws eks get-token --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --output json | jq -r '.status.token')
          if [ -n "$TOKEN" ]; then
            echo "✅ Token generated successfully"
            echo "Token length: ${#TOKEN}"
          else
            echo "❌ Failed to generate token"
            exit 1
          fi
      
      - name: Verify AWS and kubectl connection
        run: |
          echo "=== AWS Identity ==="
          aws sts get-caller-identity
          
          echo "=== Kubectl Version ==="
          kubectl version --client
          
          echo "=== Cluster Info ==="
          kubectl cluster-info
          
          echo "=== Check Permissions ==="
          kubectl auth can-i get pods --all-namespaces
          
          echo "=== Test API Access ==="
          kubectl get nodes || echo "Failed to get nodes"
      
      - name: Install Nginx Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml
      
      - name: Wait for Ingress Controller
        run: |
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s
      
      - name: Deploy app manifests
        run: |
          kubectl apply -f k8s/
      
      - name: Wait for deployments
        run: |
          kubectl rollout status deployment/client-deployment --timeout=300s
          kubectl rollout status deployment/server-deployment --timeout=300s
      
      - name: Wait for LoadBalancer
        run: |
          echo "Waiting for LoadBalancer to be ready..."
          for i in {1..30}; do
            LB_HOSTNAME=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            if [ -n "$LB_HOSTNAME" ]; then
              echo "LoadBalancer is ready: $LB_HOSTNAME"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 10
          done
      
      - name: Get Ingress URL
        run: |
          LB_HOSTNAME=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -n "$LB_HOSTNAME" ]; then
            echo "✅ Your app is available at: http://$LB_HOSTNAME"
          else
            echo "⚠️ LoadBalancer hostname not yet available"
            kubectl get svc ingress-nginx-controller -n ingress-nginx
          fi
      
      - name: Display deployment status
        if: always()
        run: |
          echo "=== Pods Status ==="
          kubectl get pods -A
          echo "=== Services ==="
          kubectl get svc -A
          echo "=== Ingress ==="
          kubectl get ingress -A